# Иногда наследование используют, чтобы наделить объекты дочерних классов определенным набором атрибутов. Сделаем такой пример.

# Предположим, тыы разрабатываешь программу для интернет-магазина. В этом магазине могут быть как реальные (физические)
# товары, так и электронные. Для этих двух групп, очевидно, нужен разный набор атрибутов:

# для реальных физических товаров: id, name, price, weight, dims

# где id - идентификатор товара (целое число); name - наименование товара (строка); price - цена товара
# (вещественное число); weight - вес товара (вещественное число); dims = (lenght, width, depth) - длина, ширина,
# глубина - габариты товара (вещественные числа);

# для электронных товаров: id, name, price, memory, frm

# где id - идентификатор товара (целое число); name - наименование товара (строка); price - цена товара
# (вещественное число); memory - занимаемый размер (в байтах - целое число); frm - формат данных (строка: pdf, docx
# и т.п.)

# Твоя задача для реальных и электронных товаров сделать два разных класса. Общие свойства этих двух видов товаров
# должны инициализироваться в базовом классе, которые тебе также нужно будет создать.

# Также тебе необходимо реализовать метод get_data(), который будет возвращать строку со свойствами товара.

# Для реальных товаров:
# get_data() => Товар <id>,  <name>, <price>. Свойства: <weight>, <dims>

# Для электронных товаров:
# get_data() => Товар <id>, <name>, <price>. Свойства: <memory>, <frm>

...

# Объяви в программе класс WindowDlg, объекты которого предполагается создавать командой:
#
# wnd = WindowDlg(заголовок окна, ширина, высота)
# В каждом объекте класса WindowDlg должны создаваться приватные локальные атрибуты:
#
# __title - заголовок окна (строка);
# __width, __height - ширина и высота окна (числа).
#
# В классе WindowDlg необходимо реализовать метод:
#
# show() - для отображения окна на экране (выводит в консоль строку в формате: "<Заголовок>: <ширина>, <высота>",
# например "Диалог 1: 100, 50").
#
# Также в классе WindowDlg необходимо реализовать два объекта-свойства:
#
# width - для изменения и считывания ширины окна;
# height - для изменения и считывания высоты окна.
#
# При изменении размеров окна необходимо выполнять проверку:
#
# - переданное значение является целым числом в диапазоне [0; 10000].
#
# Если хотя бы один размер изменился (высота или ширина), то следует выполнить автоматическую перерисовку окна
# (вызвать метод show()). При начальной инициализации размеров width, height вызывать метод show() не нужно.

...


# Тебе поручено организовать представление объектов для продажи в риэлтерских агентствах. Для этого в программе нужно
# объявить базовый класс SellItem, объекты которого создаются командой:
#
# item = SellItem(name, price)
# где name - название объекта продажи (строка); price - цена продажи (число: целое или вещественное).
#
# Каждые конкретные типы объектов описываются следующими классами, унаследованные от базового SellItem:
#
# House - дома;
# Flat - квартиры;
# Land - земельные участки.
#
#
# Объекты этих классов создаются командами:
#
# house = House(name, price, material, square)
# flat = Flat(name, price, size, rooms)
# land = Land(name, price, square)
# В каждом объекте этих классов должны формироваться соответствующие локальные атрибуты: name, price и т.д.
#
# Формирование атрибутов name и price должно выполняться в инициализаторе базового класса.
#
# Далее, объявить еще один класс с именем Agency, объекты которого создаются командой:
#
# ag = Agency(name)
# где name - название агентства (строка). В классе Agency объявить следующие методы:
#
# add_object(obj) - добавление нового объекта недвижимости для продажи (один из объектов классов: House, Flat, Land);
# remove_object(obj) - удаление объекта obj из списка объектов для продажи;
# get_objects() - возвращает список из всех объектов для продажи.

...

