# №1 В этом упражнении тебе нужно будет, используя функцию rgb(), реализовать функцию get_colors(),
# которая должна вернуть словарь цветов. В словаре должны присутствовать ключи 'red', 'green', 'blue'.
# Каждому ключу должен соответствовать результат вызова функции rgb() со значением 255 для соответствующего ключу
# аргумента. Для построения каждого цвета используйте только один аргумент!


def rgb(red=0, green=0, blue=0):
    return f'rgb({red}, {green}, {blue})'


...

# №2 Цель данного упражнения — функция updated(). Эта функция должна принимать словарь в качестве единственного
# позиционного аргумента (обязательного) и произвольное кол-во именованных аргументов. Возвращать же функция
# должна новый словарь, в котором ключи, соответствующие именованным аргументам, должны иметь сопутствующие
# значения (см.примеры).

    # d = {'a': 1, 'b': False}
    # updated(d, a=2, b=True, c=None)
    # # {'a': 2, 'b': True, 'c': None}
    # print(d)
    # # => {'a': 1, 'b': False}
    # updated(d) == d
    # # True
    # updated(d) is d
    # # False

...


# №3 Реализуй функцию, get_pretty_user_info(), которая принимает на вход неограниченное количество полей юзера,
# вроде username=Alex, age=27... . Твоя задача сформировать из этих полей словарь с данными. Функция должна возвращать
# данные подобного вида:

# age: 28
# first_name: John
# last_name: Doe
# position: Python developer



# №4 Реализуй функцию get_number_sequence(), которая принимает 2 целых числа. Необходимо сформировать список из целых
# чисел от a до b (включительно) с шагом изменения 1, используя функцию range, оператор [] и оператор распаковки *.
# Подумай о том, какие пограничные случаи могут в данной ситуации.


...

# №5 Реализуй функцию get_menu(), которая принимает словарь в качестве обязательного аргумента и произвольный набор
# именованных аргументов. Твоя задача создать единый словарь menu из всех входящих данных и вернуть его из функции.

...

