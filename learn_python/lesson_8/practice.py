# №1 Реализуй функцию swap_to_int(), которая принимает список и заменяет
# все строковые числа в списке на целочисленный тип и возвращает новый список.

# swap_to_int([1, '2', 3, '10', '12']) => [1, 2, 3, 10, 12]

...


# №2 Создай функцию swap_slice_in_list, которая принимает
# 4 аргумента - список1, список2, индекс1, индекс2. Задача такова:
# заменить в списке1 часть списка по индексам на список2. Функцию должна
# возвращать новый список.

# swap_slice_in_list([1, 2, 3, 'hello'], [10, 20], 0, 2) =>
# [10, 20, 3, 'hello']

...


# №3 Тебе необходимо реализовать функцию duplicate(), которая должна принимать
# в качестве аргумента список и удваивать этот список "по месту". Тебе нужно
# будет изменять исходный объект списка. Помним, список передается по ссылке.
# Удваивание здесь означает, что после применения к нему функции список должен
# иметь копию всех элементов, добавленную в конец как в примере ниже.

...


# №4 В этом упражнении ты будешь реализовывать классический цикл поиска.
# Функция find_index(), которую тебе предстоит написать, должна принимать
# значение и нечто, по чему можно пройтись циклом for — строку, список, кортеж.
# В ответ функция должна вернуть индекс первого элемента итерируемой
# последовательности, равного заданному значению. Если же значение в
# последовательности не встречается или же последовательность окажется
# пустой, функция должна вернуть None.

# find_index('t', 'cat')  # 2
# find_index(5, [1, 2, 3, 4, 5, 6, 7])  # 4
# find_index(42, []) is None  # True
# find_index('!', 'abc') is None  # True


...


def func(list_: list):
    new_list = list_[:]
    new_list.append(4)
    return new_list
