# №1 Тебе предстоит реализовать функцию is_all_unique(). Эта функция должна:

# Принимать итерируемый объект.
# Возвращать True, если элементы не повторяются (если элементов нет,
# то ничего не повторяется)

...


# №2 В этой практике мы будем реализовывать функции для работы с множествами,
# как с наборами флагов.
#
# Флаги помогают управлять работой некоторого кода: если флаг поднят,
# значит какая-то возможность включена.
# В этом плане флаги похожи на галочки в формах и бланках — галочку
# тоже можно поставить или не поставить.
#
# В нашем случае флаги будут представлять собой элементы множества:
# если элемент в множестве присутствует, значит и флаг поднят. Тебе же нужно
# будет реализовать две функции: toggle() и toggled().

# Функция toggle()
# Эта функция должна принимать в качестве аргументов:
#
# Один флаг
# Множество
# Если флаг уже присутствует в множестве, его нужно убрать. Если же флаг
# отсутствует, то его нужно добавить. Таким образом функция будет переключать
# состояние флага. Множество нужно заменять по месту, возвращать из функции
# ничего не нужно.
#
# Пример использования функции toggle():

# READ_ONLY = 'read_only'
# flags = set()
# toggle(READ_ONLY, flags)
# READ_ONLY in flags  # True
# toggle(READ_ONLY, flags)
# READ_ONLY in flags  # False

# Функция toggled():
# Эта функция работает похожим на toggle() образом. Вместо изменения
# исходного множества эта функция возвращает новое множество — с уже
# переключенным флагом. Пример:

# READ_ONLY = 'read_only'
# flags = set()
# new_flags = toggled(READ_ONLY, flags)
# READ_ONLY in flags  # False
# READ_ONLY in new_flags  # True

...

# №3 Реализуй функцию is_unique_number на вход принимает коллекцию чисел. Причем числа могут быть как строкой,
# так и элементами списка, так и просто набором чисел. Пример:
# 123141414
# '1231314'
# [1, 3, '4', 5, '6']
# Твоя задача вернуть множество уникальных чисел, которые отсортированы в
# порядке возрастания. Примеры:
#
# is_unique_number([1, 2, 6, '4', 2, '3']) => {1, 2, 3, 4, 6}
# is_unique_number('232443981') => {1, 2, 3, 4, 8, 9}

...

# №4 Реализуй функцию receive_number(), которая на вход принимает случайную
# строку. Функция должна выделить из строки все неповторяющиеся
# цифры (символы от 0 до 9) и вывести на экран в одну строку через пробел
# их в порядке возрастания значений

# Пример:
# receive_number('Python 3.9.11 - best language!') => 1 3 9

...
