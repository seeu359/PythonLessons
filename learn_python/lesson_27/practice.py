# Practice 1
# Объяви в программе базовый класс Animal (животное), объекты которого можно создать командой:
#
# an = Animal(name, old)
# где name - название животного (строка); old - возраст животного (целое число). Такие же локальные атрибуты
# (name и old) должны создаваться в объектах класса.
#
# Далее, объявите дочерний класс (от базового Animal) с именем Cat (кошки), объекты которого создаются командой:
#
# cat = Cat(name, old, color, weight)
# где name, old - те же самые параметры, что и в базовом классе; color - цвет кошки (строка); weight -
# вес кошки (любое положительное число).
#
# В объектах класса Cat должны автоматически формироваться локальные атрибуты: name, old, color, weight.
# Формирование атрибутов name, old должен выполнять инициализатор базового класса.
# Наконец, в классах Cat объяви метод:
#
# get_info() - для получения информации о животном.
#
# Этот метод должен возвращать строку в формате:
#
# "name: old, <остальные параметры через запятую>"
#
# Например, для следующего объекта класса Cat:
#
# cat = Cat('кот', 4, 'black', 2.25)
# метод get_info должен вернуть строку:
#
# "кот: 4, black, 2.25"


...


# Еще один пример, когда в базовом классе прописывается необходимый начальный функционал для дочерних классов.
#
# Известно, что браузер (и не только) может отправлять на сервер различные типы запросов: GET, POST, PUT,
# DELETE и др. Каждый из этих типов запросов обрабатывается в программе на сервере своим отдельным методом.
# Чтобы каждый раз не прописывать все необходимые методы в классах при обработке входящих запросов, они выносятся
# в базовый класс и вызываются из дочерних. Выполним такой пример

# Пусть в программе объявлен следующий базовый класс с именем GenericView:


# Здесь каждый метод отвечает за обработку своего типа запроса. Параметр methods - это кортеж или список,
# состоящий из набора разрешенных запросов: строк с именами соответствующих методов (как правило, пишут заглавными
# буквами).
# Тебе необходимо объявить дочерний класс с именем DetailView, объекты которого можно создавать командами:

# dv = DetailView()  # по умолчанию methods=('GET',)
# dv = DetailView(methods=('PUT', 'POST'))

# Для инициализации атрибута methods следует вызывать инициализатор базового класса GenericView.
#
# Далее, в классе DetailView нужно определить метод:

# def render_request(self, request, method): ...

# который бы имитировал выполнение поступившего на сервер запроса. Здесь request - словарь с набором данных
# запроса; method - тип запроса (строка: 'get' или 'post' и т.д.).

# Например:
#
# html = dv.render_request({'url': 'https://site.ru/home'}, 'GET')

# должен быть обработан запрос как GET-запрос с параметром url и значением 'https://site.ru/home'.
# Параметр url является обязательным в словаре request для каждого запроса.
#
# В методе render_request() необходимо выполнить проверку: является ли указанный метод (method) разрешенным
# (присутствует в коллекции methods). Если это не так, то возвращать сообщение, которое говорит о том, что данный метод
# недоступен

# Подсказка: для получения ссылки на нужный метод можно воспользоваться магическим методом __getattribute__() или
# аналогичной функцией getattr()).

# Наконец, в дочернем классе DetailView следует переопределить метод get() для нужной нам обработки GET-запросов.
# В этом методе нужно выполнить проверку, что параметр request является словарем. Если это не так, то генерировать
# сообщение с ошибкой:

# 'request не является словарем'

# Сделать проверку, что в словаре request присутствует ключ url. Если его нет, то генерировать исключение:

# 'request не содержит обязательного ключа url'

# Если же все проверки проходят, то вернуть строку в формате:
#
# "url: <request['url']>"

# dv = DetailView()
# html = dv.render_request({'url': 'https://site.ru/home'}, 'GET')   # url: https://site.ru/home

...

class GenericView:
    def __init__(self, methods=('GET',)):
        self.methods = methods

    def get(self, request):
        return "Method Get"

    def post(self, request):
        pass

    def put(self, request):
        pass

    def delete(self, request):
        pass


class DetailView(GenericView):

    def get(self, request):
        return super().get(request)


    def render_request(self, request, method):
        method = 'GET'
        _method = getattr(self, 'get')


dv = DetailView(('GET', 'POST'))
