# №1 Реализуй функцию handle_collection(). Функция принимает 2 последовательности из чисел.
# Функция должна вернуть уникальные числа, присутствующие и в первом и во втором списках
# одновременно.


...


# №2 Реализуй функцию handle_collection2(). Функция также принимает 2 последовательности из чисел. Функция должна
# вернуть уникальные числа, присутствующие в первом списке, но отсутствующие во втором.

...

# №3 Реализуй функцию is_equal_cities(). Функция должна принимать два списка из городов и возвращать True если
# списки содержат одни и те же уникальные города, в противном случае False

# def is_equal_cities(['Москва', 'Тверь', 'Уфа', 'Казань', 'Уфа', 'Москва'], ['Уфа', 'Тверь', 'Москва', 'Казань']) => True

...

# №4 В этом упражнении тебе предстоит анализировать изменения в старой и новой версии словаря. Тебе нужно реализовать
# функцию diff_keys(), которая должна:
#
# Принимать два словаря-аргумента — старый и новый
# Возвращать словарь с результатами анализа
# Результирующий словарь должен содержать строго три ниже перечисленных ключа:
#
# 'kept' — множество ключей, которые присутствовали в старом словаре и остались в новом
# 'added' — множество ключей, которые отсутствовали в старом словаре, но появились в новом
# 'removed' — множество ключей, которые присутствовали в старом словаре, но в новый не вошли

# Обрати внимание, что в этом упражнении сравниваются только ключи, а не значения.

...