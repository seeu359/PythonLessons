# Практика 1
# Объяви класс с именем DataBase, который бы хранил в себе следующую информацию:

# pk: 1
# title: "Классы и объекты"
# author: "Сергей Балакирев"
# views: 14356
# comments: 12

...


# Практика 2

# Объяви класс с именем Goods и пропиши в нем следующие атрибуты:

# title: "Мороженое"
# weight: 154
# tp: "Еда"
# price: 1024

# Затем, после объявления класса, измени его атрибут price на значение 2048 и добавь еще один атрибут:
#
# inflation: 100


...

# Практика 3
# Объяви класс с именем TravelBlog и объяви в нем атрибут:

# total_blogs: 0

# Создайте экземпляр этого класса с именем tb1, сформируйте в нем два локальных свойства:

# name: 'Франция'
# days: 6

# Увеличь значение атрибута total_blogs класса TravelBlog на единицу.
#
# Создайте еще один экземпляр класса TravelBlog с именем tb2, сформируйте в нем два локальных свойства:

# name: 'Италия'
# days: 5

# Увеличьте значение атрибута total_blogs класса TravelBlog еще на единицу.

...


# Практика 4

# Объяви класс с именем Figure и двумя атрибутами:

# type_figure: 'ellipse'
# color: 'red'

# Создай экземпляр с именем figure1 этого класса и добавь в него следующие локальные атрибуты:

# start_pt: (10, 5)
# end_pt: (100, 20)
# color: 'blue'

# Выведи на экран список всех локальных свойств (без значений) объекта fig1 в одну строчку через пробел в порядке,
# указанном в задании.


# Практика 5

# Объяви класс с именем MediaPlayer с двумя методами:
#
# open(file) - для открытия медиа-файла с именем file (создает локальное свойство filename со значением аргумента file
# в объекте класса MediaPlayer)
# play() - для воспроизведения медиа-файла (выводит на экран строку "Воспроизведение <название медиа-файла>")
#
# Создай два экземпляра этого класса с именами: media1 и media2. Вызови из них метод open() с аргументом "filemedia1"
# для объекта media1 и "filemedia2" для объекта media2. После этого вызови через объекты метод play().
# При этом, на экране должно отобразиться две строки:
#
# "Воспроизведение filemedia1"
# "Воспроизведение filemedia2"

...

# Практика 6

# Объяви класс с именем Graph и методами:
#
# set_data(data) - передача набора данных data для последующего отображения (data - список числовых данных);
# draw() - отображение данных (в том же порядке, что и в списке data)
#
# и атрибутом:
#
# LIMIT_Y = [0, 10]
#
# Метод set_data() должен формировать локальное свойство data объекта класса Graph. Атрибут data должен ссылаться на
# переданный в метод список. Метод draw() должен выводить на экран список в виде строки из чисел, разделенных
# пробелами и принадлежащие заданному диапазону атрибута LIMIT_Y (границы включаются).
#
# Создай объект graph_1 класса Graph, вызови для него метод set_data() и передай список:
#
# [10, -5, 100, 20, 0, 80, 45, 2, 5, 7]
#
# Затем, вызовите метод draw() через объект graph_1. На экране должна появиться строка с соответствующим набором чисел, записанных через пробел. Например:
#
# "10 0 2 5 7"

...

# Практика 7
# Необходимо объявить класс StreamData с методом:

# def create(self, fields, lst_values): ...

# который бы на входе получал кортеж FIELDS из названий локальных атрибутов (передается в атрибут fields) и
# список строк lst_in (передается в атрибут lst_values) и формировал бы в объекте класса StreamData локальные
# свойства с именами полей из fields и соответствующими значениями из lst_values.
#
# Если создание локальных свойств проходит успешно, то метод create() возвращает True, иначе - False. Если число
# полей и число строк не совпадает, то метод create() возвращает False и локальные атрибуты создавать не нужно.
