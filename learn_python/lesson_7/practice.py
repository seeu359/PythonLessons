# №1 Создай функцию is_list(), которая принимает 1 параметр и проверяет,
# является ли он списком


...


# №2 Реализуй функцию get_square_roots(). Функция должна принимать число и
# возвращать список квадратных корней этого числа. Например для аргумента
# 9 функция должна вернуть [-3.0, 3.0]. Тест ожидает, что сначала в
# списке будет идти отрицательный корень,
# если таковой имеется. Также корень может быть и один, если аргумент равен
# нулю. А ещё корней может и не быть, если аргумент отрицательный.

# Для решения используйте функцию sqrt() из модуля math


...

# №3 Реализуй функцию get_range(), которая для заданного положительного числа
# аргумента n должна возвращать список чисел от нуля до n, не включая само
# число n. Подумай, какие пограничные случае могут быть.


...


# №4 Тебе нужно реализовать функцию rotate(), которая должна принимать список
# в качестве аргумента и перемещать последний элемент списка в начало списка.
# Функция должна изменять переданный список, а не возвращать новый.
# Если функция получает пустой список, то изменять его она не должна.


...


# №5 В этом упражнении тебе нужно будет реализовать две функции —
# rotated_left() и rotated_right(). Каждая функция должна:

# принять список, кортеж или строку в качестве аргумента,
# с помощью срезов и конкатенации получить новое значение того же типа,
# вернуть это значение.
# Отличаются функции лишь "направлением поворота" (см. примеры ниже).
#
# Т.к. и строки, и списки с кортежами разрешают конкатенацию и срезы, ваш код
# не должен проверять тип аргумента — нужно обойтись только лишь срезами и
# конкатенацией!
#
# Обрати внимание: имена функций содержат глагол с окончанием ed — в пайтоне
# подобным образом часто называют функции, возвращающие новое значение на
# основе старого.
#
# При вращении влево первый элемент перемещается в конец:

# rotated_left("ABCD")  # "BCDA"

# При вращении вправо последний элемент перемещается в начало:

# rotated_right([1, 2, 3, 4])  # [4, 1, 2, 3]
